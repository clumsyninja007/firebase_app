{
  "_from": "csv-string",
  "_id": "csv-string@3.1.5",
  "_inBundle": false,
  "_integrity": "sha512-vkKwis9X1l31JwPsnqaoNo3PZx7k+07dlDDJ0jXgq7tCH3lIxiIaD9sAt9ETBjKFUR+nNi7PnTTpZuFy6kJe4w==",
  "_location": "/csv-string",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "csv-string",
    "fetchSpec": "latest",
    "name": "csv-string",
    "raw": "csv-string",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/csv-string/-/csv-string-3.1.5.tgz",
  "_shasum": "73dd789dbddc8be11bb5b2c4a164243d6587d4a8",
  "_shrinkwrap": null,
  "_spec": "csv-string",
  "_where": "/home/aharmony/web/firebase_app",
  "author": {
    "email": "nthouvenin@gmail.com",
    "name": "Nicolas Thouvenin"
  },
  "bugs": {
    "url": "https://github.com/touv/node-csv-string/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Stéphane Gully",
      "url": "https://github.com/kerphi"
    },
    {
      "name": "J Baumbach",
      "url": "https://github.com/jbaumbach"
    },
    {
      "name": "Sam Hauglustaine",
      "url": "https://github.com/smhg"
    },
    {
      "name": "Rick Huizinga",
      "url": "https://github.com/rickhuizinga"
    },
    {
      "name": "François Parmentier",
      "url": "https://github.com/parmentf"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "PARSE and STRINGIFY for CSV strings. It's like JSON object but for CSV. It can also work row by row. And, if can parse strings, it can be use to parse files or streams too.",
  "devDependencies": {
    "eslint": "^5.4.0",
    "istanbul": "^0.4.5",
    "mocha": ">=1.8.1",
    "should": "^1.2.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "http://github.com/touv/node-csv-string",
  "keywords": [
    "csv",
    "generator",
    "parser",
    "string"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "csv-string",
  "optionalDependencies": {},
  "readme": "# Javascript CSV Strings\n\n[![Build Status](https://travis-ci.org/Inist-CNRS/node-csv-string.png?branch=master)](https://travis-ci.org/Inist-CNRS/node-csv-string)\n\nParse and Stringify for CSV strings.\n- API similar to the JSON parser (`CSV.parse` and `CSV.stringify`).\n- Can also work row by row.\n- Can also be used to parse strings from readable streams (e.g. file streams).\n- tolerant with the weird data\n- ES6 support\n\n```javascript\nimport * as CSV from 'csv-string';\n\n// with String\nconst arr = CSV.parse('a,b,c\\na,b,c');\nconst str = CSV.stringify(arr);\n\n// with Stream\nconst stream = CSV.createStream();\nstream.on('data', (rows) => {\n    process.stdout.write(CSV.stringify(rows, ','));\n})\nprocess.stdin.pipe(stream);\n```\n\n \n## Contributors\n\n  * [Nicolas Thouvenin](https://github.com/touv)\n  * [Stéphane Gully](https://github/kerphi)\n  * [J. Baumbach](https://github.com/jbaumbach)\n  * [Sam Hauglustaine](https://github.com/smhg)\n  * [Rick Huizinga](https://github.com/rickhuizinga)\n  * [doleksy1](https://github.com/doleksy1)\n  * [François Parmentier](https://github.com/parmentf)\n\n# Installation\n\nWith [npm](http://npmjs.org):\n\n    $ npm install csv-string\n\n\n# Tests\n\nUse [mocha](https://github.com/visionmedia/mocha) to run the tests.\n\n    $ npm install mocha\n    $ mocha test\n\n# API Documentation\n\n## parse(input : String, [separator : String], [quote : String]) : Object\n\nConverts a CSV string `input` to array output.\n```javascript\nvar CSV = require('csv-string'),\n\narr = CSV.parse('a,b,c\\na,b,c');\n\nconsole.log(arr);\n```\nOutput:\n\n\t[ [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ] ]\n\nIf separator parameter is not provided, it is automatically detected.\n\n## stringify(input : Object, [separator : String]) : String\n\nConverts object `input` to a CSV string. \n\n```javascript\nvar CSV = require('csv-string');\n\nconsole.log(CSV.stringify(['a', 'b', 'c']));\nconsole.log(CSV.stringify([['c', 'd', 'e'], ['c','d','e']]));\nconsole.log(CSV.stringify({a:'e', b:'f', c:'g'}));\n```\nOutput:\n\n\ta,b,c\n\n\tc,d,e\n\tc,d,e\n\n\te,f,g\n\n## detect(input : String) : String\n\nDetects the best separator.\n\n```javascript\nvar CSV = require('csv-string');\n\nconsole.log(CSV.detect('a,b,c'));\nconsole.log(CSV.detect('a;b;c'));\nconsole.log(CSV.detect('a|b|c'));\nconsole.log(CSV.detect('a\\tb\\tc'));\n```\nOutput:\n\n\t,\n\t;\n\t|\n\t\\t\n\n\n## forEach(input : String, sep : String, quo : String, callback : Function)\n## forEach(input : String, sep : String, callback : Function)\n## forEach(input : String, callback : Function)\n_callback(row : Array, index : Number) : undefined_\n\nCalls `callback` for each CSV row/line. The Array passed to callback contains the fields of the current row.  \n\n\n```javascript\nvar CSV = require('csv-string');\n\nvar data = 'a,b,c\\nd,e,f';\n\nCSV.forEach(data, ',', function(row, index) {\n  console.log('#' + index + ' : ', row);\n});\n```\nOutput:\n\n\t#0 :  [ 'a', 'b', 'c' ]\n\t#1 :  [ 'd', 'e', 'f' ]\n\n\n## read(input : String, sep : String, quo : String, callback : Function) : Number\n## read(input : String, sep : String, callback : Function) : Number\n## read(input : String, callback : Function) : Number\n_callback(row : Array) : undefined_\n\nCalls `callback` when a CSV row is read. The Array passed to callback contains the fields of the row.  \nReturns the first offset after the row.\n\n\n```javascript\nvar CSV = require('csv-string');\n\nvar data = 'a,b,c\\nd,e,f';\n\nvar index = CSV.read(data, ',', function(row) {\n  console.log(row);\n});\n\nconsole.log(data.slice(index));\n```\nOutput:\n\n\t[ 'a', 'b', 'c' ]\n\td,e,f\n\n\n## readAll(input : String, sep : String, quo : String, callback : Function) : Number\n## readAll(input : String, sep : String, callback : Function) : Number\n## readAll(input : String, callback : Function) : Number\n_callback(rows : Array) : undefined_\n\nCalls `callback` when all CSV rows are read. The Array passed to callback contains the rows of the file.  \nReturns the offset of the end of parsing (generaly it's the end of the input string).\n\n\n```javascript\nvar CSV = require('csv-string');\n\nvar data = 'a,b,c\\nd,e,f';\n\nvar index = CSV.readAll(data, function(row) {\n  console.log(row);\n});\n\nconsole.log('-' + data.slice(index) + '-');\n```\nOutput:\n\n\t[ [ 'a', 'b', 'c' ], [ 'd', 'e', 'f' ] ]\n\t--\n## readChunk(input : String, sep : String, quo : String, callback : Function) : Number\n## readChunk(input : String, sep : String, callback : Function) : Number\n## readChunk(input : String, callback : Function) : Number\n_callback(rows : Array) : undefined_\n\nCalls `callback` when all CSV rows are read. The last row could be ignored, because the remainder could be in another chunk. \nThe Array passed to callback contains the rows of the file. \nReturns the offset of the end of parsing. If the last row is ignored, the offset will point to the beginnning of the row.\n\n```javascript\nvar CSV = require('csv-string');\n\nvar data = 'a,b,c\\nd,e';\n\nvar index = CSV.readChunk(data, function(row) {\n  console.log(row);\n});\n\nconsole.log('-' + data.slice(index) + '-');\n```\nOutput:\n\n\t[ [ 'a', 'b', 'c' ] ]\n\t--\n\t\n## createStream(options : Object) : WritableStream\n## createStream() : WritableStream\n\nCreate a writable stream for CSV chunk. Options are :\n\n* **separator** : To indicate the CSV separator. By default is auto (see the detect function)\n* quote** : To indicate the CSVquote.\n\nExample : Read CSV file from the standard input.\n\n```javascript\nvar stream = CSV.createStream();\n\nstream.on('data', function (row) {\n     console.log(row);\n  }\n)\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.pipe(stream);\n```\n\n\n# Related projects\n\n* https://npmjs.org/browse/keyword/csv\n* http://www.uselesscode.org/javascript/csv/\n* https://github.com/archan937/csonv.js\n\n# Benchmark\n\nI made a very basic benchmark to compare this project to other related projects, using file streams as input. See `./bench` for source code.\n\n## the test\n\n```bash\ntime node ./SCRITPNAME.js >/dev/null\n```\n\n## the result\n\n<table>\n<thead>\n<tr>\n<th>Package</th>\n<th>Input equal Output</th>\n<th>Time for ~1 200 000 rows</th>\n</tr>\n<tbody>\n<tr>\n<td>a-csv</td>        <td>almost</td>\t<td>0m13.903s</td>\n</tr> <tr>\n<td>csv-streamer</td> <td>yes</td>\t<td>0m15.599s</td>\n</tr> <tr>\n<td>csv-stream</td>   <td>yes</td>\t<td>0m17.265s</td>\n</tr> <tr>\n<th>csv-string</th>   <th>yes</th>\t<th>0m15.432s</th>\n</tr> <tr>\n<td>fast-csv</td>     <td>no</td>\t<td>-</td>\n</tr> <tr>\n<td>nodecsv</td>      <td>yes</td>\t<td>0m22.129s</td>\n</tr>\n</tbody>\n</table>\n\n# License\n\n[MIT/X11](https://github.com/Inist-CNRS/node-csv-string/blob/master/LICENSE)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/touv/node-csv-string.git"
  },
  "scripts": {
    "test": "istanbul test ./node_modules/.bin/_mocha -- -R spec"
  },
  "version": "3.1.5"
}
